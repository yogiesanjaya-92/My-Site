// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MySite.Data.DataAccess;

namespace MySite.Data.Migrations
{
    [DbContext(typeof(MySiteContext))]
    partial class MySiteContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("MySite.Data.Models.Article", b =>
                {
                    b.Property<Guid?>("ArticleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ARTICLE_ID")
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<int>("ArticleAttachment")
                        .HasColumnName("ARTICLE_ATTACHMENT")
                        .HasColumnType("int");

                    b.Property<Guid>("ArticleCategoryId")
                        .HasColumnName("ARTICLE_CATEGORY_ID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ArticleComment")
                        .HasColumnName("ARTICLE_COMMENT")
                        .HasColumnType("int");

                    b.Property<string>("ArticleContent")
                        .IsRequired()
                        .HasColumnName("ARTICLE_CONTENT")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("ArticleRate")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ARTICLE_RATE")
                        .HasColumnType("decimal(3,2)")
                        .HasDefaultValueSql("(0.0)");

                    b.Property<string>("ArticleTitle")
                        .IsRequired()
                        .HasColumnName("ARTICLE_TITLE")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CREATED")
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnName("CREATED_BY")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<bool?>("IsDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IS_DELETE")
                        .HasColumnType("bit")
                        .HasDefaultValueSql("(0)");

                    b.HasKey("ArticleId");

                    b.ToTable("ARTICLE");
                });

            modelBuilder.Entity("MySite.Data.Models.ArticleAttachment", b =>
                {
                    b.Property<Guid?>("AttachmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ATTACHMENT_ID")
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<Guid>("ArticleId")
                        .HasColumnName("ARTICLE_ID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AttachmentFile")
                        .IsRequired()
                        .HasColumnName("ATTACHMENT_FILE")
                        .HasColumnType("text");

                    b.Property<string>("AttachmentName")
                        .IsRequired()
                        .HasColumnName("ATTACHMENT_NAME")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("AttachmentSize")
                        .IsRequired()
                        .HasColumnName("ATTACHMENT_SIZE")
                        .HasColumnType("varchar(5)")
                        .HasMaxLength(5);

                    b.Property<DateTime?>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CREATED")
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnName("CREATED_BY")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<bool?>("IsDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IS_DELETE")
                        .HasColumnType("bit")
                        .HasDefaultValueSql("(0)");

                    b.HasKey("AttachmentId");

                    b.ToTable("ARTICLE_ATTACHMENT");
                });

            modelBuilder.Entity("MySite.Data.Models.ArticleCategory", b =>
                {
                    b.Property<Guid?>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CATEGORY_ID")
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<string>("CategoryColor")
                        .IsRequired()
                        .HasColumnName("CATEGORY_COLOR")
                        .HasColumnType("varchar(10)")
                        .HasMaxLength(10);

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnName("CATEGORY_NAME")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CREATED")
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnName("CREATED_BY")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<bool?>("IsDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IS_DELETE")
                        .HasColumnType("bit")
                        .HasDefaultValueSql("(0)");

                    b.HasKey("CategoryId");

                    b.ToTable("ARTICLE_CATEGORY");
                });

            modelBuilder.Entity("MySite.Data.Models.ArticleComment", b =>
                {
                    b.Property<Guid?>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("COMMENT_ID")
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<Guid>("ArticleId")
                        .HasColumnName("ARTICLE_ID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CommentContent")
                        .IsRequired()
                        .HasColumnName("COMMENT_CONTENT")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CREATED")
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnName("CREATED_BY")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<bool?>("IsDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IS_DELETE")
                        .HasColumnType("bit")
                        .HasDefaultValueSql("(0)");

                    b.HasKey("CommentId");

                    b.ToTable("ARTICLE_COMMENT");
                });

            modelBuilder.Entity("MySite.Data.Models.ArticleRate", b =>
                {
                    b.Property<Guid?>("RateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("RATE_ID")
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<Guid>("ArticleId")
                        .HasColumnName("ARTICLE_ID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CREATED")
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnName("CREATED_BY")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<bool?>("IsDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IS_DELETE")
                        .HasColumnType("bit")
                        .HasDefaultValueSql("(0)");

                    b.Property<int>("Rate")
                        .HasColumnName("RATE")
                        .HasColumnType("int");

                    b.HasKey("RateId");

                    b.ToTable("ARTICLE_RATE");
                });

            modelBuilder.Entity("MySite.Data.Models.Log", b =>
                {
                    b.Property<Guid?>("LogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("LOG_ID")
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<DateTime?>("LogCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("LOG_CREATED")
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("LogException")
                        .IsRequired()
                        .HasColumnName("LOG_EXCEPTION")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("LogFunction")
                        .IsRequired()
                        .HasColumnName("LOG_FUNCTION")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("LogMessage")
                        .IsRequired()
                        .HasColumnName("LOG_MESSAGE")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("LogModule")
                        .IsRequired()
                        .HasColumnName("LOG_MODULE")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("LogStackTrace")
                        .IsRequired()
                        .HasColumnName("LOG_STACK_TRACE")
                        .HasColumnType("varchar(MAX)");

                    b.HasKey("LogId");

                    b.ToTable("LOG");
                });

            modelBuilder.Entity("MySite.Data.Models.User", b =>
                {
                    b.Property<Guid?>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("USER_ID")
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<DateTime?>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CREATED")
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnName("CREATED_BY")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnName("DISPLAY_NAME")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<bool?>("IsDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IS_DELETE")
                        .HasColumnType("bit")
                        .HasDefaultValueSql("(0)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnName("PASSWORD")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Picture")
                        .IsRequired()
                        .HasColumnName("PICTURE")
                        .HasColumnType("varchar(2083)")
                        .HasMaxLength(2083);

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnName("USER_NAME")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.HasKey("UserId");

                    b.ToTable("USER");
                });
#pragma warning restore 612, 618
        }
    }
}
